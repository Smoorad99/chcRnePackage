% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/to_binary.R
\name{to_binary}
\alias{to_binary}
\title{Convert Yes/No variables to binary}
\usage{
to_binary(data, these.cols, prefix = FALSE, yesno = FALSE)
}
\arguments{
\item{data}{A dataframe containing the variables to be converted.}

\item{these.cols}{A prefix used to select all columns with the prefix or the columns specified like you would using `dplyr::select()`}

\item{prefix}{A logical argument that indicates whether or not you are using a prefix to select columns. This argument defaults to FALSE
i.e. assumes your not using a prefix unless you tell it otherwise.}

\item{yesno}{A logical argument that indicates the values of the the columns you are selecting. If TRUE you are using `to_binary`
on columns with values of Yes/No. If FALSE, you are indicating the column values are string/NA.}
}
\value{
The original dataframe with specified variables converted
to binary.
}
\description{
This function converts all "String"/"NA" or "Yes/"No" responses in the selected columns to
binary (1/0) where the strings are replaced by 1s and the NAs are replaced by 0s.
}
\examples{
# Convert "Yes"/"No" responses in columns starting with "q14" to 1/0
df_converted <- to_binary(data = bns2_pkg_data, these.cols = "q14_", prefix = TRUE, yesno = TRUE)

# View the converted dataframe side-by-side
old <- bns2_pkg_data |> dplyr::select(q14_1, q14_4)
new <- df_converted |> dplyr::select(q14_1, q14_4)
cbind(old, new) |> head(10)


# Selecting columns by column name
df_converted <- to_binary(data = bns2_pkg_data, these.cols = c(q14_5, q14_6), prefix = FALSE, yesno = TRUE)

# View
old <- bns2_pkg_data |> dplyr::select(q14_5, q14_6)
new <- df_converted |> dplyr::select(q14_5, q14_6)
cbind(old, new) |> head(10)
}
